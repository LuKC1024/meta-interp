#lang racket
;; play with it

(define-syntax define-value-and-term
  (syntax-rules ()
    [(define-value-and-term (x y) init)
     (begin
       (define x init)
       (define y 'init))]))

(define-value-and-term (eval qeval)
  ((λ (fix)
    ((λ (extend-env)
       ((λ (apply-env)
          ((λ (valof) (λ (e) ((valof e) '())))
           (fix
            (λ (valof)
              (λ (e)
                (λ (env)
                  (if (symbol? e)
                    ((apply-env env) e)
                    (if (equal? (car e) 'quote)
                      ((λ (d) d) (car (cdr e)))
                      (if (equal? (car e) 'error)
                        ((λ (e1) (error ((valof e1) env))) (car (cdr e)))
                        (if (equal? (car e) 'cons)
                          ((λ (e1)
                             ((λ (e2) (cons ((valof e1) env) ((valof e2) env)))
                              (car (cdr (cdr e)))))
                           (car (cdr e)))
                          (if (equal? (car e) 'car)
                            ((λ (e1) (car ((valof e1) env))) (car (cdr e)))
                            (if (equal? (car e) 'cdr)
                              ((λ (e1) (cdr ((valof e1) env))) (car (cdr e)))
                              (if (equal? (car e) 'pair?)
                                ((λ (e1) (pair? ((valof e1) env))) (car (cdr e)))
                                (if (equal? (car e) 'symbol?)
                                  ((λ (e1) (symbol? ((valof e1) env))) (car (cdr e)))
                                  (if (equal? (car e) 'equal?)
                                    ((λ (e1)
                                       ((λ (e2) (equal? ((valof e1) env) ((valof e2) env)))
                                        (car (cdr (cdr e)))))
                                     (car (cdr e)))
                                    (if (equal? (car e) 'if)
                                      ((λ (e1)
                                         ((λ (e2)
                                            ((λ (e3)
                                               (if ((valof e1) env)
                                                 ((valof e2) env)
                                                 ((valof e3) env)))
                                             (car (cdr (cdr (cdr e))))))
                                          (car (cdr (cdr e)))))
                                       (car (cdr e)))
                                      (if (equal? (car e) 'λ)
                                        ((λ (x)
                                           ((λ (body)
                                              (λ (arg)
                                                ((valof body) (((extend-env x) arg) env))))
                                            (car (cdr (cdr e)))))
                                         (car (car (cdr e))))
                                        ((λ (rator)
                                           ((λ (rand) (((valof rator) env) ((valof rand) env)))
                                            (car (cdr e))))
                                         (car e)))))))))))))))))))
        (fix
         (λ (apply-env)
           (λ (env)
             (λ (y)
               (if (equal? env '())
                 (error y)
                 ((λ (x)
                    ((λ (v) ((λ (env) (if (equal? x y) v ((apply-env env) y))) (cdr env)))
                     (cdr (car env))))
                  (car (car env))))))))))
     (λ (x) (λ (v) (λ (env) (cons (cons x v) env))))))
  (λ (f) ((λ (x) (x x)) (λ (x) (f (λ (v) ((x x) v))))))))

(define eval1 (eval qeval))
(define eval2 (eval1 qeval))

(for/fold ([eval eval])
          ([i (in-range 4)])
  (display
   (equal? (eval '((((λ (+) (+ +))
                     (λ (+)
                       (λ (n)
                         (λ (m)
                           (if (pair? n)
                               (cons 's (((+ +) (cdr n)) m))
                               m)))))
                    '(s s))
                   '(s s s)))
           '(s s s s s)))
  (eval qeval))